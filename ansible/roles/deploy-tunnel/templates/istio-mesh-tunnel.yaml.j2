---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ appname }}
  namespace: {{ namespace }}
  labels:
    app: {{ appname }}
---
apiVersion: v1
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: 'privileged allows access to all privileged and host
      features and the ability to run as any user, any group, any fsGroup, and with
      any SELinux context.  WARNING: this is the most relaxed SCC and should be
      used only for cluster administration. Grant with caution.'
  creationTimestamp: null
  name: {{ appname }}
  labels:
  app: {{ appname }}  
allowHostDirVolumePlugin: true
allowHostIPC: true
allowHostNetwork: true
allowHostPID: true
allowHostPorts: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
allowedFlexVolumes: null
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
groups:
- system:cluster-admins
- system:nodes
- system:masters
priority: 8
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
seccompProfiles:
- '*'
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:{{ namespace }}:{{ appname }}
volumes:
- '*'
{% for node in cluster.nodes %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ appname~"-"~node.name.split('.')[0] }}
  namespace: {{ namespace }}
  labels:
    app: {{ appname }}
    node: {{ node.name }}
data:
  wireguard.config: |-
   [Interface]
   ListenPort = {{ tunnel_port }} 
   PrivateKey = {{ node.private_key }}
    
{% for ext_cluster in clusters %}
{% if ext_cluster != cluster %}
{% for ext_node in ext_cluster.nodes %}
   [Peer]
   PublicKey = {{ ext_node.public_key }}
   AllowedIPs = {{ ext_node.hostsubnet }}
   Endpoint = {{ ext_node.public_ip }}:{{ ext_node.port }}
   PersistentKeepalive = 25
{% endfor %}
{% endif %}
{% endfor %} 
    
---        
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: {{ appname }}
    node: {{ node.name }}
  name: {{ appname~"-"~node.name.split('.')[0] }}
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: {{ appname }}
      node: {{ node.name }}
  template:
    metadata:
      labels:
        app: {{ appname }}
        node: {{ node.name }}
      name: {{ appname~"-"~node.name.split('.')[0] }}
    spec:
      nodeSelector: 
        kubernetes.io/hostname: {{ node.hostname }}
      containers:
      - env:
        - name: TUNNEL_PORT
          value: "{{ tunnel_port }}"      
        - name: TUNNEL_DEV_NAME
          value: sdn-tunnel  
        - name: TUNNEL_MODE
          value: {{ tunnel_mode }}
        - name: WIREGUARD_CONFIG
          value: /etc/wireguard_config/wireguard.config
        - name: CLUSTER_CIDR
          value: "{{ cluster.sdn_cidr }}"
        - name: TUNNEL_CIDRs
          value: {% for ext_cluster in clusters | rejectattr('name', 'match', cluster.name) %}{% if loop.index==1 %}{{ ext_cluster.sdn_cidr }}{% else %}","~{{ ext_cluster.sdn_cidr }}{% endif %}{% endfor %}          
        image: {{ image_sdn_tunnel }}
        imagePullPolicy: Always
        name: sdn-tunnel
        securityContext:
          privileged: true
        volumeMounts:
        - name: openvswitch
          mountPath: /var/run/openvswitch
        - name: modules
          mountPath: /lib/modules          
        - name: wireguard-config
          mountPath: /etc/wireguard_config
      - env:
        - name: LOG_LEVEL
          value: "{{ log_level }}" 
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP  
        - name: KUBE_CONFIG
          value: /etc/kubeconfigs
        - name: CLUSTER_CIDR
          value: "{{ cluster.sdn_cidr }}"
        - name: TUNNEL_SERVICE_CIDRs
          value: {% for ext_cluster in clusters | rejectattr('name', 'match', cluster.name) %}{% if loop.index==1 %}{{ ext_cluster.service_cidr }}{% else %}","~{{ ext_cluster.service_cidr }}{% endif %}{% endfor %}                                                                                                                                                                                      
        image: {{ image_kube_router }}
        imagePullPolicy: Always
        name: service-proxy
        securityContext:
          privileged: true
        volumeMounts:
        - name: openvswitch
          mountPath: /var/run/openvswitch
        - name: modules
          mountPath: /lib/modules
        - name: kubeconfigs
          mountPath: /etc/kubeconfigs                                                                                      
      serviceAccountName: {{ appname }}
      hostNetwork: false
      hostPID: true          
      volumes: 
      - name: openvswitch
        hostPath: 
          path: /var/run/openvswitch
          type: Directory
      - name: modules
        hostPath: 
          path: /lib/modules
          type: Directory          
      - name: wireguard-config
        configMap: 
          name: {{ appname~"-"~node.name.split('.')[0] }}
      - name: kubeconfigs
        configMap: 
          name: {{ appname~"-kubeconfigs" }}                                               
{% endfor %}

---      
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ appname~"-kubeconfigs" }}
  namespace: {{ namespace }}
  labels:
    app: {{ appname }}
data:
{% for ext_cluster in clusters | rejectattr('name', 'match', cluster.name) %}
  kubeconfig_{{ ext_cluster.name }}: |-
    kind: Config
    apiVersion: v1
    users:
    - name: {{ service_account_name }}
      user: 
        token: {{ ext_cluster.token }}
    clusters:
    - name: {{ ext_cluster.name }}
      cluster:
        certificate-authority-data: {{ ext_cluster.ca_data }}
        server: https://{{ ext_cluster.url }}
    contexts:
    - name: current
      context:
        cluster: {{ ext_cluster.name }}
        namespace: {{ namespace }}
        user: {{ service_account_name }}
    current-context: current   
{% endfor %}    